// Copyright 2013-2019 TomTom International BV. All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: ProtobufTrafficFlow_v8.proto

package tomtom

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The enum TrafficCondition indicates the traffic status on the affected location.
type TrafficCondition int32

const (
	TrafficCondition_LONG_QUEUES_TRAFFIC TrafficCondition = 1
	TrafficCondition_FREE_TRAFFIC        TrafficCondition = 2
	TrafficCondition_HEAVY_TRAFFIC       TrafficCondition = 3
	TrafficCondition_SLOW_TRAFFIC        TrafficCondition = 4
	TrafficCondition_QUEUING_TRAFFIC     TrafficCondition = 5
	TrafficCondition_STATIONARY_TRAFFIC  TrafficCondition = 6
	TrafficCondition_CLOSED              TrafficCondition = 7
	TrafficCondition_UNKNOWN             TrafficCondition = 8
)

// Enum value maps for TrafficCondition.
var (
	TrafficCondition_name = map[int32]string{
		1: "LONG_QUEUES_TRAFFIC",
		2: "FREE_TRAFFIC",
		3: "HEAVY_TRAFFIC",
		4: "SLOW_TRAFFIC",
		5: "QUEUING_TRAFFIC",
		6: "STATIONARY_TRAFFIC",
		7: "CLOSED",
		8: "UNKNOWN",
	}
	TrafficCondition_value = map[string]int32{
		"LONG_QUEUES_TRAFFIC": 1,
		"FREE_TRAFFIC":        2,
		"HEAVY_TRAFFIC":       3,
		"SLOW_TRAFFIC":        4,
		"QUEUING_TRAFFIC":     5,
		"STATIONARY_TRAFFIC":  6,
		"CLOSED":              7,
		"UNKNOWN":             8,
	}
)

func (x TrafficCondition) Enum() *TrafficCondition {
	p := new(TrafficCondition)
	*p = x
	return p
}

func (x TrafficCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtobufTrafficFlow_v8_proto_enumTypes[0].Descriptor()
}

func (TrafficCondition) Type() protoreflect.EnumType {
	return &file_ProtobufTrafficFlow_v8_proto_enumTypes[0]
}

func (x TrafficCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrafficCondition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrafficCondition(num)
	return nil
}

// Deprecated: Use TrafficCondition.Descriptor instead.
func (TrafficCondition) EnumDescriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{0}
}

// Identifies specific lanes on a road segment by type.
type LaneType int32

const (
	// Lane may only be used by high occupancy vehicles.
	LaneType_HIGH_OCCUPANCY LaneType = 0
)

// Enum value maps for LaneType.
var (
	LaneType_name = map[int32]string{
		0: "HIGH_OCCUPANCY",
	}
	LaneType_value = map[string]int32{
		"HIGH_OCCUPANCY": 0,
	}
)

func (x LaneType) Enum() *LaneType {
	p := new(LaneType)
	*p = x
	return p
}

func (x LaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtobufTrafficFlow_v8_proto_enumTypes[1].Descriptor()
}

func (LaneType) Type() protoreflect.EnumType {
	return &file_ProtobufTrafficFlow_v8_proto_enumTypes[1]
}

func (x LaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LaneType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LaneType(num)
	return nil
}

// Deprecated: Use LaneType.Descriptor instead.
func (LaneType) EnumDescriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{1}
}

// The traffic flow group is the top level message. It provides meta data
// covering general information about the flow data and the flow data itself.
type TrafficFlowGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The shared meta information.
	MetaInformation *MetaInformation `protobuf:"bytes,1,opt,name=metaInformation" json:"metaInformation,omitempty"`
	// The list of traffic flow elements.
	TrafficFlow []*TrafficFlow `protobuf:"bytes,2,rep,name=trafficFlow" json:"trafficFlow,omitempty"`
	// The list of traffic flow elements which can also provide predictive flow data.
	TrafficFlowWithPrediction []*TrafficFlowWithPrediction `protobuf:"bytes,3,rep,name=trafficFlowWithPrediction" json:"trafficFlowWithPrediction,omitempty"`
	// The list of traffic flow elements with a higher spatial resolution for speeds
	// and predictive flow data.
	TrafficFlowWithPredictionPerSection []*TrafficFlowWithPredictionPerSection `protobuf:"bytes,4,rep,name=trafficFlowWithPredictionPerSection" json:"trafficFlowWithPredictionPerSection,omitempty"`
}

func (x *TrafficFlowGroup) Reset() {
	*x = TrafficFlowGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficFlowGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficFlowGroup) ProtoMessage() {}

func (x *TrafficFlowGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficFlowGroup.ProtoReflect.Descriptor instead.
func (*TrafficFlowGroup) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{0}
}

func (x *TrafficFlowGroup) GetMetaInformation() *MetaInformation {
	if x != nil {
		return x.MetaInformation
	}
	return nil
}

func (x *TrafficFlowGroup) GetTrafficFlow() []*TrafficFlow {
	if x != nil {
		return x.TrafficFlow
	}
	return nil
}

func (x *TrafficFlowGroup) GetTrafficFlowWithPrediction() []*TrafficFlowWithPrediction {
	if x != nil {
		return x.TrafficFlowWithPrediction
	}
	return nil
}

func (x *TrafficFlowGroup) GetTrafficFlowWithPredictionPerSection() []*TrafficFlowWithPredictionPerSection {
	if x != nil {
		return x.TrafficFlowWithPredictionPerSection
	}
	return nil
}

// The meta information message provides data shared by all
// traffic flow messages.
type MetaInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creation time (UTC) of the traffic flow group in seconds since
	// 00:00:00 UTC on 1 January 1970.
	CreateTimeUTCSeconds *uint32 `protobuf:"varint,1,opt,name=createTimeUTCSeconds" json:"createTimeUTCSeconds,omitempty"`
	// The supplier and client information.
	SupplierAndClientInfo *SupplierAndClientInfo `protobuf:"bytes,2,opt,name=supplierAndClientInfo" json:"supplierAndClientInfo,omitempty"`
	// The format version. Can be used for debugging in order to compare
	// the version of the protocol buffer on client and supplier side.
	FormatVersion *int32 `protobuf:"varint,3,opt,name=formatVersion" json:"formatVersion,omitempty"`
	// map name consisting of map region and version
	MapVersion []string `protobuf:"bytes,4,rep,name=mapVersion" json:"mapVersion,omitempty"`
}

func (x *MetaInformation) Reset() {
	*x = MetaInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInformation) ProtoMessage() {}

func (x *MetaInformation) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInformation.ProtoReflect.Descriptor instead.
func (*MetaInformation) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{1}
}

func (x *MetaInformation) GetCreateTimeUTCSeconds() uint32 {
	if x != nil && x.CreateTimeUTCSeconds != nil {
		return *x.CreateTimeUTCSeconds
	}
	return 0
}

func (x *MetaInformation) GetSupplierAndClientInfo() *SupplierAndClientInfo {
	if x != nil {
		return x.SupplierAndClientInfo
	}
	return nil
}

func (x *MetaInformation) GetFormatVersion() int32 {
	if x != nil && x.FormatVersion != nil {
		return *x.FormatVersion
	}
	return 0
}

func (x *MetaInformation) GetMapVersion() []string {
	if x != nil {
		return x.MapVersion
	}
	return nil
}

// The supplier and client information message is used to identify the client
// and the supplier.
type SupplierAndClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the client.
	ClientID *string `protobuf:"bytes,1,opt,name=clientID" json:"clientID,omitempty"`
	// Identifies the supplier.
	SupplierID *string `protobuf:"bytes,2,opt,name=supplierID" json:"supplierID,omitempty"`
}

func (x *SupplierAndClientInfo) Reset() {
	*x = SupplierAndClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplierAndClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplierAndClientInfo) ProtoMessage() {}

func (x *SupplierAndClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplierAndClientInfo.ProtoReflect.Descriptor instead.
func (*SupplierAndClientInfo) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{2}
}

func (x *SupplierAndClientInfo) GetClientID() string {
	if x != nil && x.ClientID != nil {
		return *x.ClientID
	}
	return ""
}

func (x *SupplierAndClientInfo) GetSupplierID() string {
	if x != nil && x.SupplierID != nil {
		return *x.SupplierID
	}
	return ""
}

// The traffic flow message assigns speed information to a location.
type TrafficFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The location information.
	Location *Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// The speed information.
	Speed []*Speed `protobuf:"bytes,2,rep,name=speed" json:"speed,omitempty"`
	// Flag indicating road closures.
	RoadClosure *bool `protobuf:"varint,3,opt,name=roadClosure,def=0" json:"roadClosure,omitempty"`
	// List of speed parameters per section. The sections are ordered by start offset.
	SectionSpeed []*SectionSpeed `protobuf:"bytes,4,rep,name=sectionSpeed" json:"sectionSpeed,omitempty"`
}

// Default values for TrafficFlow fields.
const (
	Default_TrafficFlow_RoadClosure = bool(false)
)

func (x *TrafficFlow) Reset() {
	*x = TrafficFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficFlow) ProtoMessage() {}

func (x *TrafficFlow) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficFlow.ProtoReflect.Descriptor instead.
func (*TrafficFlow) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{3}
}

func (x *TrafficFlow) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TrafficFlow) GetSpeed() []*Speed {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *TrafficFlow) GetRoadClosure() bool {
	if x != nil && x.RoadClosure != nil {
		return *x.RoadClosure
	}
	return Default_TrafficFlow_RoadClosure
}

func (x *TrafficFlow) GetSectionSpeed() []*SectionSpeed {
	if x != nil {
		return x.SectionSpeed
	}
	return nil
}

// A traffic flow message type dedicated for flow prediction.
type TrafficFlowWithPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The location information.
	Location *Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// The speed information.
	Speed []*SpeedWithTimeStamp `protobuf:"bytes,2,rep,name=speed" json:"speed,omitempty"`
	// Flag indicating road closures.
	RoadClosure *bool `protobuf:"varint,3,opt,name=roadClosure,def=0" json:"roadClosure,omitempty"`
	// Expected time in minutes it takes until the current speed equals the usual speed.
	TimeToUsualInMinutes *uint32 `protobuf:"varint,4,opt,name=timeToUsualInMinutes" json:"timeToUsualInMinutes,omitempty"`
}

// Default values for TrafficFlowWithPrediction fields.
const (
	Default_TrafficFlowWithPrediction_RoadClosure = bool(false)
)

func (x *TrafficFlowWithPrediction) Reset() {
	*x = TrafficFlowWithPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficFlowWithPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficFlowWithPrediction) ProtoMessage() {}

func (x *TrafficFlowWithPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficFlowWithPrediction.ProtoReflect.Descriptor instead.
func (*TrafficFlowWithPrediction) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{4}
}

func (x *TrafficFlowWithPrediction) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TrafficFlowWithPrediction) GetSpeed() []*SpeedWithTimeStamp {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *TrafficFlowWithPrediction) GetRoadClosure() bool {
	if x != nil && x.RoadClosure != nil {
		return *x.RoadClosure
	}
	return Default_TrafficFlowWithPrediction_RoadClosure
}

func (x *TrafficFlowWithPrediction) GetTimeToUsualInMinutes() uint32 {
	if x != nil && x.TimeToUsualInMinutes != nil {
		return *x.TimeToUsualInMinutes
	}
	return 0
}

// A traffic flow message type dedicated for prediction with higher speed resolution.
// The location is split into sections and speed information is assigned per section.
type TrafficFlowWithPredictionPerSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The location information.
	Location *Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// The speeds matrix, each speed vector provides speed parameters per section for a certain time
	// stamp in the future.
	SpeedVector []*SpeedVector `protobuf:"bytes,2,rep,name=speedVector" json:"speedVector,omitempty"`
	// Expected time in minutes it takes until the current speed equals the usual speed.
	TimeToUsualInMinutes *uint32 `protobuf:"varint,3,opt,name=timeToUsualInMinutes" json:"timeToUsualInMinutes,omitempty"`
}

func (x *TrafficFlowWithPredictionPerSection) Reset() {
	*x = TrafficFlowWithPredictionPerSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficFlowWithPredictionPerSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficFlowWithPredictionPerSection) ProtoMessage() {}

func (x *TrafficFlowWithPredictionPerSection) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficFlowWithPredictionPerSection.ProtoReflect.Descriptor instead.
func (*TrafficFlowWithPredictionPerSection) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{5}
}

func (x *TrafficFlowWithPredictionPerSection) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TrafficFlowWithPredictionPerSection) GetSpeedVector() []*SpeedVector {
	if x != nil {
		return x.SpeedVector
	}
	return nil
}

func (x *TrafficFlowWithPredictionPerSection) GetTimeToUsualInMinutes() uint32 {
	if x != nil && x.TimeToUsualInMinutes != nil {
		return *x.TimeToUsualInMinutes
	}
	return 0
}

// The location message provides all kind of supported location referencing
// methods.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The TMC location reference.
	// It is composed of the following parts: CVVDLLLLL[xE[E]]
	//
	//	      C - hexadecimal country code as described in IEC 62106
	//	     VV - TMC location table number
	//	      D - TMC direction of the chain (direction of travel and NOT the
	//	           direction of queue growth as in RDS-TMC!). Possible values:
	//	           'P': positive direction, internal links only
	//	           '+': positive direction, external links only
	//	           'p': positive direction, internal + external links
	//	           'N': negative direction, internal links only
	//	           '-': negative direction, external links only
	//	           'n': negative direction, internal + external links
	//	  LLLLL - TMC point location code.  If the number is not 5 digits
	//	           long, zeros will be added up to 5 characters at the
	//	           beginning of the code.
	//	[xE[E]] - Either empty, when extent = 1, or fixed letter 'x' followed
	//	           by the extent (1 or 2 digits).
	Tmc *string `protobuf:"bytes,1,opt,name=tmc" json:"tmc,omitempty"`
	// The binary OpenLR location reference.
	Openlr []byte `protobuf:"bytes,2,opt,name=openlr" json:"openlr,omitempty"`
	// Length of location in meters.
	LengthInMeters *uint32 `protobuf:"varint,3,opt,name=lengthInMeters" json:"lengthInMeters,omitempty"`
	OsmIds         *OSM    `protobuf:"bytes,4,opt,name=osmIds" json:"osmIds,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{6}
}

func (x *Location) GetTmc() string {
	if x != nil && x.Tmc != nil {
		return *x.Tmc
	}
	return ""
}

func (x *Location) GetOpenlr() []byte {
	if x != nil {
		return x.Openlr
	}
	return nil
}

func (x *Location) GetLengthInMeters() uint32 {
	if x != nil && x.LengthInMeters != nil {
		return *x.LengthInMeters
	}
	return 0
}

func (x *Location) GetOsmIds() *OSM {
	if x != nil {
		return x.OsmIds
	}
	return nil
}

type OSM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnkownField *uint32  `protobuf:"varint,1,opt,name=unkownField" json:"unkownField,omitempty"`
	Ids         []*OsmID `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
}

func (x *OSM) Reset() {
	*x = OSM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSM) ProtoMessage() {}

func (x *OSM) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSM.ProtoReflect.Descriptor instead.
func (*OSM) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{7}
}

func (x *OSM) GetUnkownField() uint32 {
	if x != nil && x.UnkownField != nil {
		return *x.UnkownField
	}
	return 0
}

func (x *OSM) GetIds() []*OsmID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type OsmID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsmId    *uint32 `protobuf:"varint,1,opt,name=osmId" json:"osmId,omitempty"`
	Reversed *uint32 `protobuf:"varint,2,opt,name=reversed" json:"reversed,omitempty"`
	Start    *uint32 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End      *uint32 `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
}

func (x *OsmID) Reset() {
	*x = OsmID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsmID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsmID) ProtoMessage() {}

func (x *OsmID) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsmID.ProtoReflect.Descriptor instead.
func (*OsmID) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{8}
}

func (x *OsmID) GetOsmId() uint32 {
	if x != nil && x.OsmId != nil {
		return *x.OsmId
	}
	return 0
}

func (x *OsmID) GetReversed() uint32 {
	if x != nil && x.Reversed != nil {
		return *x.Reversed
	}
	return 0
}

func (x *OsmID) GetStart() uint32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *OsmID) GetEnd() uint32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

// The speed message subsumes all speed and travel time related information.
type Speed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The average speed along a location in kilometers per hour.
	AverageSpeedKmph *int32 `protobuf:"varint,1,opt,name=averageSpeedKmph" json:"averageSpeedKmph,omitempty"`
	// The time to pass a location in seconds.
	TravelTimeSeconds *int32 `protobuf:"varint,2,opt,name=travelTimeSeconds" json:"travelTimeSeconds,omitempty"`
	// The confidences value rates the reliability of this speed estimate.
	// The quality, amount and age of live data for the affected location
	// contribute to this score. It scales from 0 (no confidence) to 100
	// (fully confident about the estimate).
	Confidence *int32 `protobuf:"varint,3,opt,name=confidence" json:"confidence,omitempty"`
	// The ratio of current speed to the free flow speed on a scale from 0
	// (stationary traffic) to 1 (free flow traffic). The precision is three
	// decimal places.
	RelativeSpeed *float32 `protobuf:"fixed32,4,opt,name=relativeSpeed" json:"relativeSpeed,omitempty"`
	// Traffic condition on the affected location.
	TrafficCondition *TrafficCondition `protobuf:"varint,5,opt,name=trafficCondition,enum=trafficFlow.TrafficCondition" json:"trafficCondition,omitempty"`
	// The average speed along a location in international miles per hour.
	AverageSpeedMph *int32 `protobuf:"varint,6,opt,name=averageSpeedMph" json:"averageSpeedMph,omitempty"`
	// Defines conditions when to apply this speed information.
	SpeedCondition *SpeedCondition `protobuf:"bytes,7,opt,name=speedCondition" json:"speedCondition,omitempty"`
}

func (x *Speed) Reset() {
	*x = Speed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speed) ProtoMessage() {}

func (x *Speed) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speed.ProtoReflect.Descriptor instead.
func (*Speed) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{9}
}

func (x *Speed) GetAverageSpeedKmph() int32 {
	if x != nil && x.AverageSpeedKmph != nil {
		return *x.AverageSpeedKmph
	}
	return 0
}

func (x *Speed) GetTravelTimeSeconds() int32 {
	if x != nil && x.TravelTimeSeconds != nil {
		return *x.TravelTimeSeconds
	}
	return 0
}

func (x *Speed) GetConfidence() int32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *Speed) GetRelativeSpeed() float32 {
	if x != nil && x.RelativeSpeed != nil {
		return *x.RelativeSpeed
	}
	return 0
}

func (x *Speed) GetTrafficCondition() TrafficCondition {
	if x != nil && x.TrafficCondition != nil {
		return *x.TrafficCondition
	}
	return TrafficCondition_LONG_QUEUES_TRAFFIC
}

func (x *Speed) GetAverageSpeedMph() int32 {
	if x != nil && x.AverageSpeedMph != nil {
		return *x.AverageSpeedMph
	}
	return 0
}

func (x *Speed) GetSpeedCondition() *SpeedCondition {
	if x != nil {
		return x.SpeedCondition
	}
	return nil
}

// Combines a Speed message with a time stamp in the future this speed is relevant for.
type SpeedWithTimeStamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minutes in future relative to the creation time of the complete flow data
	// the specified speed information is relevant. A value of 0 shall indicate the current
	// speed data.
	MinutesInFuture *uint32 `protobuf:"varint,1,opt,name=minutesInFuture" json:"minutesInFuture,omitempty"`
	// The speed information at the specified time.
	Speed []*Speed `protobuf:"bytes,2,rep,name=speed" json:"speed,omitempty"`
}

func (x *SpeedWithTimeStamp) Reset() {
	*x = SpeedWithTimeStamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedWithTimeStamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedWithTimeStamp) ProtoMessage() {}

func (x *SpeedWithTimeStamp) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedWithTimeStamp.ProtoReflect.Descriptor instead.
func (*SpeedWithTimeStamp) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{10}
}

func (x *SpeedWithTimeStamp) GetMinutesInFuture() uint32 {
	if x != nil && x.MinutesInFuture != nil {
		return *x.MinutesInFuture
	}
	return 0
}

func (x *SpeedWithTimeStamp) GetSpeed() []*Speed {
	if x != nil {
		return x.Speed
	}
	return nil
}

// Combines a SectionSpeeds message with a time stamp in the future these speeds are relevant for.
type SpeedVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minutes in future relative to the creation time of the complete flow data
	// the specified speed information is relevant. A value of 0 shall indicate the current
	// speed data.
	MinutesInFuture *uint32 `protobuf:"varint,1,opt,name=minutesInFuture" json:"minutesInFuture,omitempty"`
	// List of speed parameters per section. The sections are ordered by start offset.
	SectionSpeed []*SectionSpeed `protobuf:"bytes,2,rep,name=sectionSpeed" json:"sectionSpeed,omitempty"`
}

func (x *SpeedVector) Reset() {
	*x = SpeedVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedVector) ProtoMessage() {}

func (x *SpeedVector) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedVector.ProtoReflect.Descriptor instead.
func (*SpeedVector) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{11}
}

func (x *SpeedVector) GetMinutesInFuture() uint32 {
	if x != nil && x.MinutesInFuture != nil {
		return *x.MinutesInFuture
	}
	return 0
}

func (x *SpeedVector) GetSectionSpeed() []*SectionSpeed {
	if x != nil {
		return x.SectionSpeed
	}
	return nil
}

// Combines a Speed message with an offset value. The speed is only relevant for the location part
// starting at the specified offset and ending at the start offset of the succeeding section or the
// end of the location in case of the last section.
type SectionSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start offset of the section in meters. This offset value is relative to the start of the
	// location (or in TMC terms: the secondary location).
	StartOffsetInMeters *uint32 `protobuf:"varint,1,opt,name=startOffsetInMeters" json:"startOffsetInMeters,omitempty"`
	// Speed information for section.
	Speed *Speed `protobuf:"bytes,2,opt,name=speed" json:"speed,omitempty"`
	// Flag indicating road closures.
	RoadClosure *bool `protobuf:"varint,3,opt,name=roadClosure,def=0" json:"roadClosure,omitempty"`
}

// Default values for SectionSpeed fields.
const (
	Default_SectionSpeed_RoadClosure = bool(false)
)

func (x *SectionSpeed) Reset() {
	*x = SectionSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionSpeed) ProtoMessage() {}

func (x *SectionSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionSpeed.ProtoReflect.Descriptor instead.
func (*SectionSpeed) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{12}
}

func (x *SectionSpeed) GetStartOffsetInMeters() uint32 {
	if x != nil && x.StartOffsetInMeters != nil {
		return *x.StartOffsetInMeters
	}
	return 0
}

func (x *SectionSpeed) GetSpeed() *Speed {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *SectionSpeed) GetRoadClosure() bool {
	if x != nil && x.RoadClosure != nil {
		return *x.RoadClosure
	}
	return Default_SectionSpeed_RoadClosure
}

// Defines conditions on speeds.
type SpeedCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies all lanes this speed is relevant for by type.
	LaneType *LaneType `protobuf:"varint,1,opt,name=laneType,enum=trafficFlow.LaneType" json:"laneType,omitempty"`
}

func (x *SpeedCondition) Reset() {
	*x = SpeedCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedCondition) ProtoMessage() {}

func (x *SpeedCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ProtobufTrafficFlow_v8_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedCondition.ProtoReflect.Descriptor instead.
func (*SpeedCondition) Descriptor() ([]byte, []int) {
	return file_ProtobufTrafficFlow_v8_proto_rawDescGZIP(), []int{13}
}

func (x *SpeedCondition) GetLaneType() LaneType {
	if x != nil && x.LaneType != nil {
		return *x.LaneType
	}
	return LaneType_HIGH_OCCUPANCY
}

var File_ProtobufTrafficFlow_v8_proto protoreflect.FileDescriptor

var file_ProtobufTrafficFlow_v8_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x81, 0x03, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x64, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46,
	0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f,
	0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x19, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe5, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x54, 0x43, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x54, 0x43,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x44, 0x22, 0xd2, 0x01, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x22, 0xe2, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f,
	0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x75, 0x61,
	0x6c, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6d, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6d, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x6c, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x6c, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x6f, 0x73, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4f,
	0x53, 0x4d, 0x52, 0x06, 0x6f, 0x73, 0x6d, 0x49, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x03, 0x4f, 0x53,
	0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4f,
	0x73, 0x6d, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x05, 0x4f, 0x73, 0x6d,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x73, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6f, 0x73, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xe1, 0x02, 0x0a,
	0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4b, 0x6d, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4b, 0x6d,
	0x70, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x4d, 0x70, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x70, 0x68, 0x12, 0x43, 0x0a, 0x0e, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x68, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x49, 0x6e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x0b, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0b, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x22, 0x43, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xa8, 0x01,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x53, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x55, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52,
	0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x2a, 0x1e, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x10, 0x00, 0x42, 0x1a, 0x5a, 0x18, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x64, 0x68, 0x75, 0x64, 0x2f, 0x74, 0x6f,
	0x6d, 0x74, 0x6f, 0x6d,
}

var (
	file_ProtobufTrafficFlow_v8_proto_rawDescOnce sync.Once
	file_ProtobufTrafficFlow_v8_proto_rawDescData = file_ProtobufTrafficFlow_v8_proto_rawDesc
)

func file_ProtobufTrafficFlow_v8_proto_rawDescGZIP() []byte {
	file_ProtobufTrafficFlow_v8_proto_rawDescOnce.Do(func() {
		file_ProtobufTrafficFlow_v8_proto_rawDescData = protoimpl.X.CompressGZIP(file_ProtobufTrafficFlow_v8_proto_rawDescData)
	})
	return file_ProtobufTrafficFlow_v8_proto_rawDescData
}

var file_ProtobufTrafficFlow_v8_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ProtobufTrafficFlow_v8_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ProtobufTrafficFlow_v8_proto_goTypes = []any{
	(TrafficCondition)(0),                       // 0: trafficFlow.TrafficCondition
	(LaneType)(0),                               // 1: trafficFlow.LaneType
	(*TrafficFlowGroup)(nil),                    // 2: trafficFlow.TrafficFlowGroup
	(*MetaInformation)(nil),                     // 3: trafficFlow.MetaInformation
	(*SupplierAndClientInfo)(nil),               // 4: trafficFlow.SupplierAndClientInfo
	(*TrafficFlow)(nil),                         // 5: trafficFlow.TrafficFlow
	(*TrafficFlowWithPrediction)(nil),           // 6: trafficFlow.TrafficFlowWithPrediction
	(*TrafficFlowWithPredictionPerSection)(nil), // 7: trafficFlow.TrafficFlowWithPredictionPerSection
	(*Location)(nil),                            // 8: trafficFlow.Location
	(*OSM)(nil),                                 // 9: trafficFlow.OSM
	(*OsmID)(nil),                               // 10: trafficFlow.OsmID
	(*Speed)(nil),                               // 11: trafficFlow.Speed
	(*SpeedWithTimeStamp)(nil),                  // 12: trafficFlow.SpeedWithTimeStamp
	(*SpeedVector)(nil),                         // 13: trafficFlow.SpeedVector
	(*SectionSpeed)(nil),                        // 14: trafficFlow.SectionSpeed
	(*SpeedCondition)(nil),                      // 15: trafficFlow.SpeedCondition
}
var file_ProtobufTrafficFlow_v8_proto_depIdxs = []int32{
	3,  // 0: trafficFlow.TrafficFlowGroup.metaInformation:type_name -> trafficFlow.MetaInformation
	5,  // 1: trafficFlow.TrafficFlowGroup.trafficFlow:type_name -> trafficFlow.TrafficFlow
	6,  // 2: trafficFlow.TrafficFlowGroup.trafficFlowWithPrediction:type_name -> trafficFlow.TrafficFlowWithPrediction
	7,  // 3: trafficFlow.TrafficFlowGroup.trafficFlowWithPredictionPerSection:type_name -> trafficFlow.TrafficFlowWithPredictionPerSection
	4,  // 4: trafficFlow.MetaInformation.supplierAndClientInfo:type_name -> trafficFlow.SupplierAndClientInfo
	8,  // 5: trafficFlow.TrafficFlow.location:type_name -> trafficFlow.Location
	11, // 6: trafficFlow.TrafficFlow.speed:type_name -> trafficFlow.Speed
	14, // 7: trafficFlow.TrafficFlow.sectionSpeed:type_name -> trafficFlow.SectionSpeed
	8,  // 8: trafficFlow.TrafficFlowWithPrediction.location:type_name -> trafficFlow.Location
	12, // 9: trafficFlow.TrafficFlowWithPrediction.speed:type_name -> trafficFlow.SpeedWithTimeStamp
	8,  // 10: trafficFlow.TrafficFlowWithPredictionPerSection.location:type_name -> trafficFlow.Location
	13, // 11: trafficFlow.TrafficFlowWithPredictionPerSection.speedVector:type_name -> trafficFlow.SpeedVector
	9,  // 12: trafficFlow.Location.osmIds:type_name -> trafficFlow.OSM
	10, // 13: trafficFlow.OSM.ids:type_name -> trafficFlow.OsmID
	0,  // 14: trafficFlow.Speed.trafficCondition:type_name -> trafficFlow.TrafficCondition
	15, // 15: trafficFlow.Speed.speedCondition:type_name -> trafficFlow.SpeedCondition
	11, // 16: trafficFlow.SpeedWithTimeStamp.speed:type_name -> trafficFlow.Speed
	14, // 17: trafficFlow.SpeedVector.sectionSpeed:type_name -> trafficFlow.SectionSpeed
	11, // 18: trafficFlow.SectionSpeed.speed:type_name -> trafficFlow.Speed
	1,  // 19: trafficFlow.SpeedCondition.laneType:type_name -> trafficFlow.LaneType
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_ProtobufTrafficFlow_v8_proto_init() }
func file_ProtobufTrafficFlow_v8_proto_init() {
	if File_ProtobufTrafficFlow_v8_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ProtobufTrafficFlow_v8_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TrafficFlowGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MetaInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SupplierAndClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TrafficFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TrafficFlowWithPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TrafficFlowWithPredictionPerSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*OSM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*OsmID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Speed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SpeedWithTimeStamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SpeedVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SectionSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtobufTrafficFlow_v8_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SpeedCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ProtobufTrafficFlow_v8_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ProtobufTrafficFlow_v8_proto_goTypes,
		DependencyIndexes: file_ProtobufTrafficFlow_v8_proto_depIdxs,
		EnumInfos:         file_ProtobufTrafficFlow_v8_proto_enumTypes,
		MessageInfos:      file_ProtobufTrafficFlow_v8_proto_msgTypes,
	}.Build()
	File_ProtobufTrafficFlow_v8_proto = out.File
	file_ProtobufTrafficFlow_v8_proto_rawDesc = nil
	file_ProtobufTrafficFlow_v8_proto_goTypes = nil
	file_ProtobufTrafficFlow_v8_proto_depIdxs = nil
}
